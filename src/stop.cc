/**
 * @file stop.cc
 *
 * @copyright 2019 3081 Staff, All rights reserved.
 */
#include <iostream>
#include <vector>

#include "src/stop.h"

Stop::Stop(int id, double longitude, double latitude) : id_(id),
  longitude_(longitude), latitude_(latitude) {
  // Defaults to Westbound Coffman Union stop
  // no initialization of list of passengers necessary
}

/**
  * @brief AddPassengers takes in a Passenger pointer which comes from
  * calls that generate new passengers at a stop. When these passengers 
  * are generated by the passenger generator, they are pushed to the back
  * of the Stop's passenger list.
  *
  */
int Stop::AddPassengers(Passenger * pass) {
  passengers_.push_back(pass);
  return 1;
}

/**
  * @brief LoadPassengers takes in a Bus pointer. The method iterates through
  * the stops passenger list and making individual calls for each passenger to
  * LoadPassenger(Passenger *) in the Bus class. As these passengers are added
  * one-by-one, they are then removed from the stops passenger list.
  *
  */
int Stop::LoadPassengers(Bus * bus) {
  for (std::list<Passenger *>::iterator it = passengers_.begin();
       it != passengers_.end(); ) {
    bus -> LoadPassenger(*it);
    it = passengers_.erase(it);
    --it;
  }
  return 1;
}

/**
  * @brief Updates for a stop mean that the Stop is responsible for calling
  * Update on every passenger that is in its passenger list.
  *
  */
void Stop::Update() {
  for (std::list<Passenger *>::iterator it = passengers_.begin();
       it != passengers_.end(); it++) {
    (*it)->Update();
  }
}

/**
  * @brief GetId returns the Stop which is useful for checking when a 
  * passenger has reached their destination stop.
  *
  */
int Stop::GetId() const {
  return id_;
}

/**
  * @brief GetId returns the Stop which is useful for checking when a 
  * passenger has reached their destination stop.
  *
  */
double Stop::GetLatitude() {  // const?
  return latitude_;
}

/**
  * @brief GetId returns the Stop which is useful for checking when a 
  * passenger has reached their destination stop.
  *
  */
double Stop::GetLongitude() {  // const?
  return longitude_;
}

int Stop::GetNumPeople() {
  return passengers_.size();
}

/**
  * @brief Report method takes in an ostream object to allow for flexibility
  * in output. The information for the stop is displayed and then the Stop is
  * responsible for iterating through its passenger list and calling Report
  * on each of its passengers.
  *
  */
void Stop::Report(std::ostream & out) const {
  out << "ID: " << id_ << std::endl;
  out << "Passengers waiting: " << passengers_.size() << std::endl;
  for (std::list<Passenger *>::const_iterator it = passengers_.begin();
       it != passengers_.end(); it++) {
    (*it)->Report(out);
  }
}
